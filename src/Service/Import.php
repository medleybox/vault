<?php

namespace App\Service;

use App\Entity\Entry;
use App\Provider\ProviderInterface;
use App\Repository\{EntryRepository, EntryMetadataRepository};
use App\Message\ImportJob;
use Doctrine\Common\Collections\ArrayCollection;
use Psr\Log\LoggerInterface;
use Ramsey\Uuid\Uuid;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Process\Process;
use Symfony\Component\Messenger\MessageBusInterface;

final class Import
{
    /**
     * Full path to directory where imports are downloaded
     * @var string
     */
    const TMP_DIR = '/var/www/var/tmp/';

    /**
     * Mimio folder for storing thumbnails
     * @var string
     */
    const THUMBNAILS_MIMIO = 'thumbnails';

    /**
     * Permitted file extensions that will be downloaded and then uploaded to minio
     * @var array
     */
    const EXTENSIONS = ['*.opus', '*.ogg'];

    /**
     * Downloads must complete within 300 seconds (5 minutes)
     * @var int
     */
    const DOWNLOAD_TIMEOUT = 300;

    /**
     * The provider to run the import with
     * @var \App\Provider\ProviderInterface
     */
    private $provider;

    /**
     * If invoking this service on the command line, provide the SymfonyStlye to use
     * @var null|\Symfony\Component\Console\Style\SymfonyStyle
     */
    private $io = null;

    /**
     * UUID for this import. Gets generated by the setUp function
     * @var string
     */
    private $uuid;

    /**
     * File downloaded via youtube-dl
     * @var \Symfony\Component\Finder\SplFileInfo
     */
    private $file;

    /**
     * File stats generated by
     * @var array
     */
    private $stats;

    /**
     * Path relitive to minio storage
     * @var string
     */
    private $upload;

    /**
     * @var \App\Service\Minio
     */
    private $minio;

    /**
     * @var \App\Repository\EntryRepository
     */
    private $entryRepo;

    /**
     * @var \App\Repository\EntryMetadataRepository
     */
    private $entryMetaRepo;

    /**
     * @var \Psr\Log\LoggerInterface
     */
    private $log;

    /**
     * @var \Symfony\Component\Messenger\MessageBusInterface
     */
    private $bus;

    /**
     * @var \App\Service\Request
     */
    private $request;

    /**
     * @var \App\Service\Thumbnail
     */
    private $thumbnail;

    /**
     * @var \App\Service\WebsocketClient
     */
    private $wsClient;

    public function __construct(Minio $minio, EntryRepository $entryRepo, EntryMetadataRepository $entryMetaRepo, LoggerInterface $log, MessageBusInterface $bus, Request $request, Thumbnail $thumbnail, WebsocketClient $wsClient)
    {
        $this->minio = $minio;
        $this->entryRepo = $entryRepo;
        $this->entryMetaRepo = $entryMetaRepo;
        $this->log = $log;
        $this->bus = $bus;
        $this->request = $request;
        $this->thumbnail = $thumbnail;
        $this->wsClient = $wsClient;
    }

    private function log(string $msg, string $stage)
    {
        $this->log->info($msg);
        $msg = preg_split('/\r\n|\r|\n/', $msg);
        $this->wsClient->importLogOutput($msg, $stage);

        return true;
    }

    public function seachForDownload($provider)
    {
        $args = ['youtube-dl', '--print-json', '--get-thumbnail', $provider->getDownloadLink()];
        $this->log->debug('youtube search', $args);
        $process = new Process($args, self::TMP_DIR, null, null, self::DOWNLOAD_TIMEOUT);
        $process->run();

        return $process->isSuccessful();
    }

    public function setUp(ProviderInterface $provider, string $uuid = null): bool
    {
        // First check for import
        $entry = $this->entryRepo->findViaProvider($provider);
        if (null !== $entry && null === $uuid) {
            throw new \Exception('Entry has already been imported');
        }

        // Check if the entry had been marked as imported
        if (null !== $entry && null !== $entry->getImported() && null !== $entry->getPath()) {
            throw new \Exception('Entry has already been imported in database');
        }

        $search = $this->seachForDownload($provider);
        if (true !== $search) {
            throw new \Exception('Unable to find entry after search');
        }

        $this->provider = $provider;
        $this->uuid = $uuid;
        if (null === $uuid) {
            $this->uuid = Uuid::uuid4()->toString();
        }

        return true;
    }

    public function queue(): bool
    {
        try {
            $this->log("Starting queue for job {$this->uuid}", 'queue');
            // Create a new import job and dispatch it to run in the background.
            $this->bus->dispatch(new ImportJob($this->provider, $this->uuid));
        } catch (\Exception $e) {
            return false;
        }

        return true;
    }

    public function start(): bool
    {
        // Check that this service has been setup before continuing
        if (null === $this->provider || null === $this->uuid) {
            throw new \Exception('You need to call setUp() on this service first!');
        }

        $this->log('Attempting to download and convert from source', 'start');
        if (false === $this->attemptDownload()) {
            $this->log->error('Unable to download file ', [$this->provider->getDownloadLink()]);

            return false;
        }

        $this->log('Checking for download in a permitted format', 'checkForDownload');
        if (false === $this->checkForDownload()) {
            return false;
        }

        $this->log('Running process functions', 'process');
        $this->process();

        $this->log('Uploading file to minio', 'upload');
        $this->upload();

        $this->log('Importing into database and webapp', 'import');
        $this->import();

        $this->log("Completed import of {$this->uuid}", 'finish');

        return true;
    }

    protected function attemptDownload()
    {
        $url = $this->provider->getDownloadLink();
        $args = ['youtube-dl', '--newline', '--youtube-skip-dash-manifest', '-o', "{$this->uuid}.%(ext)s", '-x', $url];

        $this->log("Attempting to download {$url}", 'attemptDownload');
        $this->log->debug('youtube-dl args', $args);

        $process = new Process($args, self::TMP_DIR, null, null, self::DOWNLOAD_TIMEOUT);
        if (null !== $this->log) {
            $process->start();
            foreach ($process as $type => $data) {
                $this->wsClient->importOutput($data);
                if ($process::OUT === $type) {
                    $this->log->debug($data);
                } else { // $process::ERR === $type
                    $this->log->error($data);
                }
            }
            $this->log('completed', 'attemptDownload');

            return $process->isSuccessful();
        }

        $process->run();
        $this->log('completed', 'attemptDownload');

        return $process->isSuccessful();
    }

    protected function checkForDownload()
    {
        $name = $this->uuid . '.*';
        $search = [$name];
        $this->log("Looking for files with name {$name}", 'checkForDownload');
        $finder = new Finder();
        $finder->files()
            ->in(self::TMP_DIR)
            ->name($search)
        ;

        if (!$finder->hasResults()) {
            $this->log->error('No download found!');

            return false;
        }

        foreach ($finder as $file) {
            $this->file = $file;
            $this->log("Found download {$this->file->getRelativePathname()}", 'checkForDownload');

            return true;
        }
    }

    public function generateThumbnail()
    {
        $link = $this->provider->getThumbnailLink();
        $this->thumbnail->generate($this->uuid, $link);

        return true;
    }

    private function calculateFileStats()
    {
        $this->stats = $this->minio->getFileStats($this->file);
    }

    protected function process()
    {
        // Make sure that the metadata has been fetched
        $this->provider->fetchMetadata();
        $this->generateThumbnail();
        $this->calculateFileStats();
    }

    private function getProvidorNamespace()
    {
        $class = get_class($this->provider);
        $explode = explode('\\', $class);
        $name = array_pop($explode);

        return strtolower($name);
    }

    protected function upload()
    {
        $this->upload = "{$this->getProvidorNamespace()}/{$this->file->getFilename()}";
        $this->log->debug('upload()', [$this->upload, $this->file]);
        $this->minio->upload($this->file->getFilename(), $this->upload);

        return true;
    }

    protected function import()
    {
        $metadata = $this->entryMetaRepo->findOneBy(['ref' => $this->provider->getId()]);
        if (null === $metadata) {
            $metadata = $this->provider->fetchMetadata();
        }

        $data = new ArrayCollection([
            'uuid' => $this->uuid,
            'path' => $this->upload,
            'title' => $this->provider->getTitle(),
            'thumbnail' => $this->thumbnail->getPath(),
            'size' => $this->stats['size'],
            'seconds' => $this->stats['seconds']
        ]);

        $entry = $this->entryRepo->createFromCompletedImport($data, $metadata);
        $this->webhock($entry);

        return true;
    }

    /**
     * Function to notify webapp of import
     */
    public function webhock(Entry $entry, $status = 'complete')
    {
        $update = [
            'uuid' => $entry->getUuid(),
            'path' => $entry->getPath(),
            'provider' => $entry->getMetadata()->getProvider(),
            'title' => $entry->getTitle(),
            'size' => $entry->getSize(),
            'seconds' => $entry->getSeconds(),
            'metadata' => $entry->getMetadata()->getData()
        ];
        $this->log->debug("Webhock !!!", $update);
        $this->request->post("/media-file/update", $update);

        return true;
    }
}
