<?php

namespace App\Service;

use App\Provider\ProviderInterface;
use GuzzleHttp\Client;
use Ramsey\Uuid\Uuid;
use Symfony\Component\Process\Process;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Console\Style\SymfonyStyle;

final class Import
{
    /**
     * Full path to directory where imports are downloaded
     * @var string
     */
    const TMP_DIR = '/var/www/var/tmp/';

    /**
     * Mimio folder for storing thumbnails
     * @var string
     */
    const THUMBNAILS_MIMIO = 'thumbnails';

    /**
     * Permitted file extensions that will be downloaded and then uploaded to minio
     * @var array
     */
    const EXTENSIONS =['*.opus', '*.ogg'];

    /**
     * Downloads must complete within 300 seconds (5 minutes)
     * @var int
     */
    const DOWNLOAD_TIMEOUT = 300;

    /**
     * The provider to run the import with
     * @var \App\Provider\ProviderInterface
     */
    private $provider;

    /**
     * If invoking this service on the command line, provide the SymfonyStlye to use
     * @var null|\Symfony\Component\Console\Style\SymfonyStyle
     */
    private $io = null;

    /**
     * UUID for this import. Gets generated by the setUp function
     * @var string
     */
    private $uuid;

    /**
     * File downloaded via youtube-dl
     * @var \Symfony\Component\Finder\SplFileInfo
     */
    private $file;

    /**
     * Path to thumbnail generated
     * @var string
     */
    private $thumbnail;

    /**
     * Path relitive to minio storage
     * @var string
     */
    private $upload;

    /**
     * @var \App\Service\Minio
     */
    private $minio;

    public function __construct(Minio $minio)
    {
        $this->minio = $minio;
    }

    public function setUp(ProviderInterface $provider, SymfonyStyle $io = null): bool
    {
        $this->provider = $provider;
        $this->uuid = Uuid::uuid4()->toString();
        if (null !== $io) {
            $this->io = $io;
        }

        return true;
    }

    public function start(): bool
    {
        // Check that this service has been setup before continuing
        if (null === $this->provider || null === $this->uuid) {
            throw new \Exception('You need to call setUp() on this service first!');
        }

        if (false === $this->attemptDownload()) {
            dump('Unable to download file');
            return false;
        }

        if (false === $this->checkForDownload()) {
            return false;
        }

        $this->process();
        $this->upload();
        $this->dump();

        return true;
    }

    protected function attemptDownload()
    {
        $url = $this->provider->getDownloadLink();
        $args = ['youtube-dl', '--youtube-skip-dash-manifest', '-o', "{$this->uuid}.%(ext)s", '-x', $url];
        $process = new Process($args, self::TMP_DIR, null, null, self::DOWNLOAD_TIMEOUT);

        if (null !== $this->io) {
            $process->start();
            foreach ($process as $type => $data) {
                if ($process::OUT === $type) {
                    $this->io->write($data);
                } else { // $process::ERR === $type
                    $this->io->getErrorStyle()->warning($data);
                }
            }

            return $process->isSuccessful();
        }

        $process->run();

        return $process->isSuccessful();
    }

    protected function checkForDownload()
    {
        $finder = new Finder();
        $finder->files()
            ->in(self::TMP_DIR)
            ->name([$this->uuid . '.*'])
        ;

        if (!$finder->hasResults()) {
            dump("No download found!");

            return false;
        }

        foreach ($finder as $file) {
            $this->file = $file;
            dump("Found download {$file->getRelativePathname()}");

            return true;
        }
    }

    public function generateThumbnail()
    {
        dump('Generating thumbnail');
        $link = $this->provider->getThumbnailLink();
        $filename = "{$this->uuid}.jpg";
        $this->thumbnail = self::THUMBNAILS_MIMIO . "/{$this->uuid}.jpg";

        dump("Downloading from {$link}");
        $client = new Client();
        $client->request('GET', $link, ['sink' => self::TMP_DIR . $filename]);

        dump("Uploading to minio");
        $this->minio->upload($filename, $this->thumbnail);

        return $this->thumbnail;
    }

    protected function process()
    {
        // Make sure that the metadata has been fetched
        $this->provider->fetchMetadata();
        $this->generateThumbnail();
    }

    private function getProvidorNamespace()
    {
        $class = get_class($this->provider);
        $explode = explode('\\', $class);
        $name = array_pop($explode);

        return strtolower($name);
    }

    protected function upload()
    {
        $this->upload = "{$this->getProvidorNamespace()}/{$this->file->getFilename()}";
        $this->minio->upload($this->file->getFilename(), $this->upload);

        return true;
    }

    protected function dump()
    {
        $metadata = $this->provider->fetchMetadata();
        $title = $metadata['title'];
        $thumbnailUrl = $metadata['thumbnail'];

        dump('====== Import complete ======');
        dump("UUID: {$this->uuid}");
        dump("Title: {$title}");
        dump("Thumbnail URL: {$thumbnailUrl}");
        dump("Thumbnail: {$this->thumbnail}");
        dump("File name: {$this->file->getRelativePathname()}");
        dump("Mimio storage path: {$this->upload}");
    }
}
